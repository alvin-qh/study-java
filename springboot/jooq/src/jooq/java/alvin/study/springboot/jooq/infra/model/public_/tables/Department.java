/*
 * This file is generated by jOOQ.
 */
package alvin.study.springboot.jooq.infra.model.public_.tables;


import alvin.study.springboot.jooq.infra.model.public_.Keys;
import alvin.study.springboot.jooq.infra.model.public_.Public;
import alvin.study.springboot.jooq.infra.model.public_.tables.records.DepartmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Department extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.DEPARTMENT</code>
     */
    public static final Department DEPARTMENT = new Department();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>PUBLIC.DEPARTMENT.ID</code>.
     */
    public final TableField<DepartmentRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.ORG_ID</code>.
     */
    public final TableField<DepartmentRecord, Long> ORG_ID = createField(DSL.name("ORG_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.NAME</code>.
     */
    public final TableField<DepartmentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.PARENT_ID</code>.
     */
    public final TableField<DepartmentRecord, Long> PARENT_ID = createField(DSL.name("PARENT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.DELETED</code>.
     */
    public final TableField<DepartmentRecord, Long> DELETED = createField(DSL.name("DELETED"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.CREATED_BY</code>.
     */
    public final TableField<DepartmentRecord, Long> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.UPDATED_BY</code>.
     */
    public final TableField<DepartmentRecord, Long> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.CREATED_AT</code>.
     */
    public final TableField<DepartmentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>PUBLIC.DEPARTMENT.UPDATED_AT</code>.
     */
    public final TableField<DepartmentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Department(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Department(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.DEPARTMENT</code> table reference
     */
    public Department(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>PUBLIC.DEPARTMENT</code> table reference
     */
    public Department(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>PUBLIC.DEPARTMENT</code> table reference
     */
    public Department() {
        this(DSL.name("DEPARTMENT"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DepartmentRecord, Long> getIdentity() {
        return (Identity<DepartmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<DepartmentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UX_DEPARTMENT_ID, Keys.UX_DEPARTMENT_NAME);
    }

    @Override
    public Department as(String alias) {
        return new Department(DSL.name(alias), this);
    }

    @Override
    public Department as(Name alias) {
        return new Department(alias, this);
    }

    @Override
    public Department as(Table<?> alias) {
        return new Department(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(String name) {
        return new Department(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Name name) {
        return new Department(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Table<?> name) {
        return new Department(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Condition condition) {
        return new Department(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Department where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Department whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
