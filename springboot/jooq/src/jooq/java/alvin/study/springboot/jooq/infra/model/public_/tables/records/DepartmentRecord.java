/*
 * This file is generated by jOOQ.
 */
package alvin.study.springboot.jooq.infra.model.public_.tables.records;


import alvin.study.springboot.jooq.infra.model.public_.tables.Department;

import java.time.LocalDateTime;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartmentRecord extends UpdatableRecordImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.ID</code>.
     */
    public DepartmentRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.ORG_ID</code>.
     */
    public DepartmentRecord setOrgId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.ORG_ID</code>.
     */
    public Long getOrgId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.NAME</code>.
     */
    public DepartmentRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.NAME</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.PARENT_ID</code>.
     */
    public DepartmentRecord setParentId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.PARENT_ID</code>.
     */
    public Long getParentId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.DELETED</code>.
     */
    public DepartmentRecord setDeleted(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.DELETED</code>.
     */
    public Long getDeleted() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.CREATED_BY</code>.
     */
    public DepartmentRecord setCreatedBy(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.CREATED_BY</code>.
     */
    public Long getCreatedBy() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.UPDATED_BY</code>.
     */
    public DepartmentRecord setUpdatedBy(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.UPDATED_BY</code>.
     */
    public Long getUpdatedBy() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.CREATED_AT</code>.
     */
    public DepartmentRecord setCreatedAt(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>PUBLIC.DEPARTMENT.UPDATED_AT</code>.
     */
    public DepartmentRecord setUpdatedAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.DEPARTMENT.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DepartmentRecord
     */
    public DepartmentRecord() {
        super(Department.DEPARTMENT);
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    public DepartmentRecord(Long id, Long orgId, String name, Long parentId, Long deleted, Long createdBy, Long updatedBy, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Department.DEPARTMENT);

        setId(id);
        setOrgId(orgId);
        setName(name);
        setParentId(parentId);
        setDeleted(deleted);
        setCreatedBy(createdBy);
        setUpdatedBy(updatedBy);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    public DepartmentRecord(alvin.study.springboot.jooq.infra.model.public_.tables.pojos.Department value) {
        super(Department.DEPARTMENT);

        if (value != null) {
            setId(value.getId());
            setOrgId(value.getOrgId());
            setName(value.getName());
            setParentId(value.getParentId());
            setDeleted(value.getDeleted());
            setCreatedBy(value.getCreatedBy());
            setUpdatedBy(value.getUpdatedBy());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
