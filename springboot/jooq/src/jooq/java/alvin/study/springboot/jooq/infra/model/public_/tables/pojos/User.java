/*
 * This file is generated by jOOQ.
 */
package alvin.study.springboot.jooq.infra.model.public_.tables.pojos;


import alvin.study.springboot.jooq.infra.model.UserType;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private Long orgId;
    private String account;
    private String password;
    private UserType type;
    private Long deleted;
    private Long createdBy;
    private Long updatedBy;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    public User() {}

    public User(User value) {
        this.id = value.id;
        this.orgId = value.orgId;
        this.account = value.account;
        this.password = value.password;
        this.type = value.type;
        this.deleted = value.deleted;
        this.createdBy = value.createdBy;
        this.updatedBy = value.updatedBy;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
    }

    public User(
        Long id,
        Long orgId,
        String account,
        String password,
        UserType type,
        Long deleted,
        Long createdBy,
        Long updatedBy,
        LocalDateTime createdAt,
        LocalDateTime updatedAt
    ) {
        this.id = id;
        this.orgId = orgId;
        this.account = account;
        this.password = password;
        this.type = type;
        this.deleted = deleted;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>PUBLIC.USER.ID</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>PUBLIC.USER.ID</code>.
     */
    public User setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.ORG_ID</code>.
     */
    public Long getOrgId() {
        return this.orgId;
    }

    /**
     * Setter for <code>PUBLIC.USER.ORG_ID</code>.
     */
    public User setOrgId(Long orgId) {
        this.orgId = orgId;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.ACCOUNT</code>.
     */
    public String getAccount() {
        return this.account;
    }

    /**
     * Setter for <code>PUBLIC.USER.ACCOUNT</code>.
     */
    public User setAccount(String account) {
        this.account = account;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.PASSWORD</code>.
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Setter for <code>PUBLIC.USER.PASSWORD</code>.
     */
    public User setPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.TYPE</code>.
     */
    public UserType getType() {
        return this.type;
    }

    /**
     * Setter for <code>PUBLIC.USER.TYPE</code>.
     */
    public User setType(UserType type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.DELETED</code>.
     */
    public Long getDeleted() {
        return this.deleted;
    }

    /**
     * Setter for <code>PUBLIC.USER.DELETED</code>.
     */
    public User setDeleted(Long deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.CREATED_BY</code>.
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>PUBLIC.USER.CREATED_BY</code>.
     */
    public User setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.UPDATED_BY</code>.
     */
    public Long getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>PUBLIC.USER.UPDATED_BY</code>.
     */
    public User setUpdatedBy(Long updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>PUBLIC.USER.CREATED_AT</code>.
     */
    public User setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>PUBLIC.USER.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>PUBLIC.USER.UPDATED_AT</code>.
     */
    public User setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.orgId == null) {
            if (other.orgId != null)
                return false;
        }
        else if (!this.orgId.equals(other.orgId))
            return false;
        if (this.account == null) {
            if (other.account != null)
                return false;
        }
        else if (!this.account.equals(other.account))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.deleted == null) {
            if (other.deleted != null)
                return false;
        }
        else if (!this.deleted.equals(other.deleted))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.orgId == null) ? 0 : this.orgId.hashCode());
        result = prime * result + ((this.account == null) ? 0 : this.account.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.deleted == null) ? 0 : this.deleted.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(id);
        sb.append(", ").append(orgId);
        sb.append(", ").append(account);
        sb.append(", ").append(password);
        sb.append(", ").append(type);
        sb.append(", ").append(deleted);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }
}
