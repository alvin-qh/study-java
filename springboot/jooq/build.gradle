buildscript {
  // 遍历所有的依赖
  configurations["classpath"].resolutionStrategy.eachDependency {
      if (requested.group.startsWith("org.jooq") && requested.name.startsWith("jooq")) {
          useVersion "${VER_JOOQ}"
      }
  }
}

// 需要将 Spring 依赖的 JOOQ 版本进行替换, 参见 settings.gradle 中 buildscript 部分的配置
plugins {
  id "nu.studer.jooq" version "${VER_GRADLE_JOOQ}"
  id "org.flywaydb.flyway"
}

sourceSets {
  main {
    java {
      srcDirs += ["src/jooq/java"]
    }
  }
}

springBoot {
  mainClass = "alvin.study.springboot.jooq.Main"
}

bootJar {
  exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/*.MF"

  manifest {
    attributes "Implementation-Title": "Study Spring Boot Jooq"
    attributes "Implementation-Version": projectVersion.version
  }

  archiveBaseName = project.group
  archiveFileName = "alvin.study.springboot-jooq.${archiveExtension.get()}"
}

def DB_URL = "jdbc:h2:${projectDir}/.data/dev;MODE=MYSQL"
def DB_USER = "dev"
def DB_PASSWORD = "password"

flyway {
  url = DB_URL
  user = DB_USER
  password = DB_PASSWORD
  locations = [
    "filesystem:${projectDir}/src/main/resources/migration"
  ]
  table = "schema_version"
}

jooq {
  version = "${VER_JOOQ}"
  edition = nu.studer.gradle.jooq.JooqEdition.OSS

  // 配置 JOOQ 代码生成
  configurations {
    main {
      generateSchemaSourceOnCompilation = true

      // 代码生成工具配置
      generationTool {
        logging = org.jooq.meta.jaxb.Logging.INFO   // 生成过程中日志级别

        // JDBC 连接属性
        jdbc {
          driver = "org.h2.Driver"
          url = DB_URL
          user = DB_USER
          password = DB_PASSWORD
        }

        // 配置生成器
        generator {
          name = "org.jooq.codegen.DefaultGenerator"  // 生成器实现类
          strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy" // 代码生成策略类

          // 配置要生成代码的数据库信息
          database {
            name = "org.jooq.meta.h2.H2Database"
            includes = "PUBLIC.*"
            excludes = "PUBLIC.schema_version | PUBLIC.flyway_schema_history"
            // recordVersionFields = "version"

            // 特殊字段类型处理
            forcedTypes {
              // 处理 User.type 字段
              forcedType {
                // 字段对应的 java 类型
                userType = "alvin.study.springboot.jooq.infra.model.UserType"
                // 是否为枚举类型, 此时会使用 org.jooq.impl.EnumConverter 转换器进行处理
                enumConverter = true
                // 要处理的字段, 为一个正则表达式, 匹配所有要被处理的字段
                includeExpression = "USER\\.TYPE"
              }

              // 处理 Employee.info 字段
              forcedType {
                // 字段对应的 java 类型
                userType = "alvin.study.springboot.jooq.infra.model.EmployeeInfo"
                // 是否为 JSON 类型, 此时会使用 org.jooq.jackson.extensions.converters.JSONtoJacksonConverter 转换器进行处理
                converter = "alvin.study.springboot.jooq.infra.converter.EmployeeInfoConverter"
                // 要处理的字段, 为一个正则表达式, 匹配所有要被处理的字段
                includeExpression = "EMPLOYEE\\.INFO"
              }
            }
          }

          // 配置生成规则
          generate {
            deprecated = false
            records = true
            fluentSetters = true
            pojos = true
            // immutablePojos = true  // 令 pojo 类型必须通过构造器创建, 无 set 方法
            pojosEqualsAndHashCode = true
            // jooqVersionReference = false  // 不约束 Jooq 的版本号
            // daos = true
            fluentSetters = true
            javaTimeTypes = true
          }

          // 生成代码配置
          target {
            packageName = "alvin.study.springboot.jooq.infra.model"
            directory = "src/jooq/java"
          }
        }
      }
    }
  }
}

/**
 * 设置 generateJooq 任务
 */
tasks.named("generateJooq").configure {
  // customize execution of the code generation tool (only show output if code generation failed)
  def outRef = new java.util.concurrent.atomic.AtomicReference<OutputStream>()
  javaExecSpec = { JavaExecSpec s ->
    outRef.set(new ByteArrayOutputStream())
    s.standardOutput = outRef.get()
    s.errorOutput = outRef.get()
    s.ignoreExitValue = true
  }
  execResultHandler = { ExecResult r ->
    def out = outRef.getAndSet(null)
    if (r.exitValue != 0) {
      throw new RuntimeException("jOOQ source code generation failed:\n\n" + out.toString())
    }
  }
}

dependencies {
  implementation ("org.springframework.boot:spring-boot-starter-jooq") {
    exclude group: "org.jooq", module: "jooq"
  }
  implementation "org.springframework.boot:spring-boot-starter-web",
                 "org.springframework.boot:spring-boot-starter-jdbc",
                 "org.jooq:jooq:${VER_JOOQ}",
                 "org.modelmapper:modelmapper:${VER_MODELMAPPER}",
                 "org.modelmapper.extensions:modelmapper-jooq:${VER_MODELMAPPER}",
                 "commons-codec:commons-codec:${VER_COMMONS_CODEC}",
                 "com.h2database:h2:${VER_H2_DB}"
  runtimeOnly "org.flywaydb:flyway-core:${VER_FLYWAY}"
  jooqGenerator "com.h2database:h2:${VER_H2_DB}"
}
