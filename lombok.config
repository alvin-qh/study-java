# 导入默认配置
# import ~/.lombok/default.config

# 清除导入配置中的项, 恢复默认值
# clear lombok.val.flagUsage

# 类型: `boolean`
# 作用: 如果为true, 阻止 lombok 继续向上层目录查找配置文件
# config.stopbubbling = false

# 类型: `enum` (`lombok.core.configuration.CapitalizationStrategy`)
# 可选值: [`BASIC` | `BEANSPEC`]
# 作用: 生成 getter/setter 字段时的属性名大小写规则
# 详解: 如果分别有字段 `xName`, 和字段 `userName`
#      在 `BASIC` 模式下, `get` 方法名为 `getXName` 和 `getUserName`
#      在 `BEANSPEC` 模式下则为 `getxName`, `getUserName`
# lombok.accessors.capitalization = BASIC

# 类型: `boolean`
# 作用: 如果为 `true`, 生成的 setter 方法不再是 `void`, 而是返回 `this`, 方便链式调用
# lombok.accessors.chain = false

# 类型: `boolean`
# 作用: 为 `true` 时, 生成 getter/setter 方法时不加 get/set 前缀
# 示例: 字段为 `username`, 那么 get/set 方法则分别为 `username()` 和 `username(String username)`
# lombok.accessors.fluent = false

# 类型: `boolean`
# 作用: 为true时, 生成的 getter/setter 方法和 `with` (`with` 已弃用) 方法带有 `final` 修饰符 (防止重载)
# lombok.accessors.makeFinal = false

# 类型: `string[]`
# 作用: 生成的 getter/setter 自动去除指定前缀
# 默认为空, 示例为仅 `sys_` 前缀会被去除
# lombok.accessors.prefix += sys_
# lombok.accessors.prefix += p_
# lombok.accessors.prefix -= p_

# 类型: `boolean`
# 作用: 为 `true` 时, 在生成的代码上添加 `@javax.annotation.Generated` 注解, 已弃用,
#      使用 `lombok.addJavaxGeneratedAnnotation` 代替
# lombok.addGeneratedAnnotation = false

# 类型: `boolean`
# 作用: 为 `true` 时, 在生成的代码上添加 `@javax.annotation.Generated` 注解
# lombok.addJavaxGeneratedAnnotation = false

# 类型: `boolean`
# 作用: 为 `true` 时, 在生成的代码上添加 `@lombok.Generated` 注解
# lombok.addLombokGeneratedAnnotation = false

# 类型: `nullity-annotation-library` (带有空注解的库)
# 可选值: `none` | `javax`(=JSR305, 不推荐) | `jakarta` | `eclipse` | `jetbrains` | `netbeans` |
#        `androidx` | `android.support` (安卓已弃用) | `checkerframework` (推荐) | `findbugs` |
#        `spring` | `jml` | `CUSTOM:com.foo.my.nonnull.annotation:com.foo.my.nullable.annotation` (自定义)
# 作用: 非 `none` 时, lombok 会自动添加 `@NotNull` 和 `@Nullable` 注解 (例如在 `toString` 返回值永远不会为 `null`,
#      而 `equals` 方法参数可以为 `null`)
# lombok.addNullAnnotations = none

# 类型: `boolean`
# 作用: 为 `true` 时, 在生成的代码上添加 `@java.lang.SuppressWarnings("all")` 注解
# lombok.addSuppressWarnings = true

# 类型: `boolean`
# 作为: 为 `true` 时, 构造函数添加 `@ConstructorProperties` 注解
# lombok.anyConstructor.addConstructorProperties=false

# 类型: `boolean`
# 作用: 生成构造函数时自动添加 `@ConstructorProperties` 注解
# lombok.anyConstructor.suppressConstructorProperties = false

# 类型: `String`
# 作用: 生成的 builder 类名称, `*` 表示类名, 如设置为 `*Abac`, 则 'User'
#      类的 builder 类名为: `UserAbac`
# lombok.builder.className = *Builder

# 类型: `String[]`
# 作用: 将字段上指定的注解复制到 getters, setters, with methods, builder-setters 等
#      默认为空, 示例为将字段上的 Abac 注解复制到 getter/setter 和构建器的 setter 方法上
#      (`with` 已被 lombok 弃用)
# lombok.copyableAnnotations += kim.nzxy.Abcd

# 类型: `enum` (`lombok.core.configuration.CallSuperType`)
# 可选值: `CALL` | `SKIP` | `WARN`
# 作用: 生成equals 和 hashCode方法时, callSuper的默认值
# lombok.equalsAndHashCode.callSuper = WARN

# 类型: `boolean`
# 作用: 生成 `equals` 和 `hashCode` 方法时, 不调用 getter 方法, 而是直接使用字段
# lombok.equalsAndHashCode.doNotUseGetters = false

# 类型: `boolean`
# 在生成的代码上添加 `@edu.umd.cs.findbugs.annotations.SuppressFBWarnings` 注解
# lombok.extern.findbugs.addSuppressFBWarnings = false

# 类型: `boolean`
# 作用: 将所有字段设为final(即便没有 lombok 注解), 可以使用 `@NonFinal` 注解覆盖此配置
# lombok.fieldDefaults.defaultFinal = false

# 类型: `boolean`
# 作用: 如果没有显示的修饰符(即便没有 lombok 注解), 将全部加上 `private` 修饰符,
#      可以使用 `@PackagePrivate` 注解覆盖此配置
# lombok.fieldDefaults.defaultPrivate = [false | true]

# 类型: `string`
# 作用: `@FieldNameConstants` 注解生成的默认内部类类名
# lombok.fieldNameConstants.innerTypeName = Fields

# 类型: `boolean`
# 作用: `@FieldNameConstants` 注解生成的常量名是否大写, 设为 `true` 表示大写, 否则和字段名一致
# lombok.fieldNameConstants.uppercase = false

# 类型: `boolean`
# 作用: `Boolean` 类型字段的 getter 方法名为 `getXXX()` 而非 `isXXX()`
# lombok.getter.noIsPrefix = true

# 类型: 自定义日志声明
# 作用: `@CustomLog` 注解使用, 默认值为空, 示例为自定义 log, 返回值和方法中间用空格隔开,
#      `NAME` 位置可选值为: `TYPE`, `NAME`, `TOPIC` 和 `NULL`
# 使用 `NAME` 生成: `private static final my.cool.Logger log = my.cool.LoggerFactory.getLogger(LogExample.class.getName())`
# 使用 `TYPE` 生成: `private static final my.cool.Logger log = my.cool.LoggerFactory.getLogger(LogExample.class)`
# 使用 `NULL` 生成: `private static final my.cool.Logger log = my.cool.LoggerFactory.getLogger()`
# 使用 `TOPIC` 生成: 需要在 `@CustomLog` 注解中指定 topic,
#      如 `@CustomLog(topic="abcd")` 生成: `private static final my.cool.Logger log = my.cool.LoggerFactory.createLogger("abcd")`
# lombok.log.custom.declaration = my.cool.Logger my.cool.LoggerFactory.createLogger(NAME)

# 类型: `boolean`
# 作用: 生成的日志字段为 `static` 字段
# lombok.log.fieldIsStatic = true

# 类型: identifier-name
# 作用: 生成的日志字段的字段名
# lombok.log.fieldName = log

# 类型: `boolean`
# 作用: `@Data` 与 `@Value` 注解生成一个 `private` 的无参构造函数
# lombok.noArgsConstructor.extraPrivate = false

# 类型: `enum` (`lombok.core.configuration.NullCheckExceptionType`)
# 可选值: `NullPointerException` | `IllegalArgumentException` | `Assertion` | `JDK` | `Guava`
# 作用: 如果参数为空, 抛出指定异常
# lombok.nonNull.exceptionType = NullPointerException

# 类型: `boolean`
# 作用: `@Singular` 注解自动将参数名从复数变成单数
# lombok.singular.auto = true

# 类型: `boolean`
# 作用: 如果是 `java.util` 包下的继承, 自动变为不可变类型, 如 `ImmutableList` 等
# lombok.singular.useGuava = false

# 类型: `enum` (`lombok.core.configuration.CallSuperType`)
# 作用: 生成 `toString` 方法时, `callSuper` 的默认值
# lombok.toString.callSuper = SKIP

# 类型: `boolean`
# 作用: `toString` 方法不调用 getter 方法而是直接使用字段值
# lombok.toString.doNotUseGetters = false

# 类型: `boolean`
# 作用: 生成的 `toString` 方法是否包含字段名, 不包含的话大概是这样的: `Person(1, 张三, 21, false)`
# lombok.toString.includeFieldNames = true

# 类型: `boolean`
# 作用: 为 `true` 表示生成的 `toString` 方法仅包含显式标记为 `@ToString.Include` 的字段和方法,
#      否则则包含非 `static` 字段, 以及非 `$` 开头的字段
# lombok.toString.onlyExplicitlyIncluded = false

# `@Accessors` 注解
#lombok.accessors.flagUsage = ALLOW

# `XxxArgsConstructor`: 如 `@AllArgsConstructor` | `@NoArgsConstructor` | `@RequiredArgsConstructor`
# lombok.anyConstructor.flagUsage = ALLOW

# 允许使用 `@AllArgsConstructor` 注解
# lombok.allArgsConstructor.flagUsage = ALLOW

# 允许使用 `@Builder` 注解
# lombok.builder.flagUsage = ALLOW

# 允许使用 `@Cleanup` 注解
# lombok.cleanup.flagUsage = ALLOW

# 允许使用 `@Data` 注解
# lombok.data.flagUsage = ALLOW

# 允许使用 `@Delegate` 注解
# lombok.delegate.flagUsage = ALLOW

# 允许使用 `@EqualsAndHashCode` 注解
# lombok.equalsAndHashCode.flagUsage = ALLOW

# 允许使用实验性质的注解
# lombok.experimental.flagUsage = ALLOW

# 允许使用 `@ExtensionMethod` 注解
# lombok.extensionMethod.flagUsage = ALLOW

# 允许使用 `@FieldDefaults` 注解
# lombok.fieldDefaults.flagUsage = ALLOW

# 允许使用 `@FieldNameConstants` 注解
# lombok.fieldNameConstants.flagUsage = ALLOW

# 允许使用 `@Getter` 注解
# lombok.getter.flagUsage = ALLOW

# 允许使用 `@Getter(lazy=true)` 注解
# lombok.getter.lazy.flagUsage = ALLOW

# 允许使用 `@Helper` 注解
# lombok.helper.flagUsage = ALLOW

# 允许使用 `@Jacksonized` 注解
# lombok.jacksonized.flagUsage = ALLOW

# 允许使用 `@CommonsLog` 注解
# lombok.log.apacheCommons.flagUsage = ALLOW

# 允许使用 `@CustomLog` 注解
# lombok.log.custom.flagUsage = ALLOW

# 允许使用日志注解
# lombok.log.flagUsage = ALLOW

# 允许使用 `@Flogger` 注解
# lombok.log.flogger.flagUsage = ALLOW

# 允许使用 `@Log` 注解
# lombok.log.javaUtilLogging.flagUsage = ALLOW

# 允许使用 `@JBossLog` 注解
# lombok.log.jbosslog.flagUsage = ALLOW

# 允许使用 `@Log4j` 注解
# lombok.log.log4j.flagUsage = ALLOW

# 允许使用 `@Log4j2` 注解
# lombok.log.log4j2.flagUsage = ALLOW

# 允许使用 `@Slf4j` 注解
# lombok.log.slf4j.flagUsage = ALLOW

# 允许使用 `@XSlf4j` 注解
# lombok.log.xslf4j.flagUsage = ALLOW

# 允许使用 `@NoArgsConstructor` 注解
# lombok.noArgsConstructor.flagUsage = ALLOW

# 允许使用 `@NonNull` 注解
# lombok.nonNull.flagUsage = ALLOW

# 允许使用注解中的 `onX` 属性, 例如 `onMethod` | `onParam` | `onConstructor`
# lombok.onX.flagUsage = ALLOW

# 允许使用 `@RequiredArgsConstructor` 注解
# lombok.requiredArgsConstructor.flagUsage = ALLOW

# 允许使用 `@Setter` 注解
# lombok.setter.flagUsage = ALLOW

# 允许使用 `@SneakyThrows` 注解
# lombok.sneakyThrows.flagUsage = ALLOW

# 允许使用 `@StandardException` 注解
# lombok.standardException.flagUsage = ALLOW

# 允许使用 `@SuperBuilder` 注解
# lombok.superBuilder.flagUsage = ALLOW

# 允许使用 `@Synchronized` 注解
# lombok.synchronized.flagUsage = ALLOW

# 允许使用 `@ToString` 注解
# lombok.toString.flagUsage = ALLOW

# 允许使用 `@UtilityClass` 注解
# lombok.utilityClass.flagUsage = ALLOW

# 允许使用 `val` 关键字 (其实 lombok 中 `val` 为接口)
lombok.val.flagUsage = ERROR

# 允许使用 `@Value` 注解
# lombok.value.flagUsage = ALLOW

# 允许使用 `var` 关键字(其实 lombok 中 `var` 为接口)
lombok.var.flagUsage = ERROR

# 允许使用 `@With` 注解
# lombok.with.flagUsage = ALLOW

# 允许使用 `@WithBy` 注解
# lombok.withBy.flagUsage = ALLOW
