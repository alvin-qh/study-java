services:
  percona:
    # nacos 配置存储数据库
    image: percona/percona-server:8.0
    hostname: percona
    container_name: percona
    restart: always
    privileged: true
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 256M
        reservations:
          memory: 128M
    env_file:
      - ./env/percona.env
    volumes:
      - ./conf/percona.cnf:/etc/my.cnf.d/percona.cnf:ro # 配置文件
      - ./sql/mysql-schema.sql:/docker-entrypoint-initdb.d/mysql-schema.sql:ro # 设置初始化 sql 脚本的路径
      - ./percona_logs:/var/log/mysql
      - percona_data:/var/lib/mysql
    networks:
      - nacos_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -uhealth | grep -q 'alive'"
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
  # 启动 3 个 nacos 实例
  nacos1:
    image: nacos/nacos-server:v3.0.2
    hostname: nacos1
    container_name: nacos1
    env_file:
      # 指定 nacos 启动环境变量
      - ./env/nacos.env
    volumes:
      - ./nacos_logs:/home/nacos/logs
    privileged: true
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      percona:
        condition: service_started
    networks:
      - nacos_network
    healthcheck:
      # 健康检查
      test:
        [
          "CMD-SHELL",
          "curl -fs localhost:8848/nacos/actuator/prometheus &> /dev/null 2>&1 || exit 1"
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
  nacos2:
    image: nacos/nacos-server:v3.0.2
    hostname: nacos2
    container_name: nacos2
    env_file:
      - ./env/nacos.env
    volumes:
      - ./nacos_logs:/home/nacos/logs
    privileged: true
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      percona:
        condition: service_started
    networks:
      - nacos_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fs localhost:8848/nacos/actuator/prometheus &> /dev/null 2>&1 || exit 1"
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
  nacos3:
    image: nacos/nacos-server:v3.0.2
    hostname: nacos3
    container_name: nacos3
    env_file:
      - ./env/nacos.env
    volumes:
      - ./nacos_logs:/home/nacos/logs
    privileged: true
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      percona:
        condition: service_started
    networks:
      - nacos_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fs localhost:8848/nacos/actuator/prometheus &> /dev/null 2>&1 || exit 1"
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
  # 启动 nginx 服务进行负载均衡
  nginx:
    image: nginx:1
    hostname: nginx
    container_name: nginx
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./conf/nginx_nacos.conf:/etc/nginx/conf.d/default.conf:ro
      - ./conf/nginx_nacos_stream.conf:/etc/nginx/conf.d/nacos.conf.stream:ro
      - ./conf/nginx_status.conf:/etc/nginx/conf.d/status.conf:ro
      - ./nginx_logs:/var/log/nginx
    ulimits:
      nproc: 65535
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 64M
        reservations:
          memory: 16M
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fs localhost:8090/stub_status &> /dev/null 2>&1 || exit 1"
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    ports:
      # 暴露 nacos 所有对外端口
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
      - "8888:8888"
    networks:
      - nacos_network
    depends_on:
      nacos1:
        condition: service_started
      nacos2:
        condition: service_started
      nacos3:
        condition: service_started
networks:
  nacos_network:
volumes:
  percona_data:
